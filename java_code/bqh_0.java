/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  gnu.trove.map.hash.TIntObjectHashMap
 */
import gnu.trove.map.hash.TIntObjectHashMap;

/*
 * Renamed from bQH
 */
public enum bqh_0 {
    a(0, "collect.success"),
    b(1, "error.unknown"),
    c(2, "collect.error.badDistance"),
    d(3, "error.notEnoughKamas"),
    e(4, "occupation.error.levelRequired"),
    f(5, "collect.error.badAltitude"),
    g(6, "action.error.cantWhileDead"),
    h(10, "plant.error.tooManyInPartition"),
    i(35, "plant.error.tooManyInZone"),
    j(36, "plant.error.notAllowed"),
    k(11, "plant.error.cantPlantInZone"),
    l(12, "plant.error.groundTypeExclusive"),
    m(13, "plant.error.failed"),
    n(14, "collect.error.cantBeCollect"),
    o(15, "collect.error.resourceUnavailable"),
    p(16, "plant.error.present"),
    q(39, "error.resource.plant.restricted"),
    r(17, "error.resource.collect.impossible"),
    s(18, "plant.error.groundTypeError"),
    t(19, "plant.error.itemError"),
    u(20, "bdd.error"),
    v(21, "craft.unknown"),
    w(22, "occupation.error.skillRequired"),
    x(23, "craft.error.unknowRecipe"),
    y(24, "inventory.error.ingredientsNotFound"),
    z(25, "collect.error.cantJoin"),
    A(26, "collect.fightInProgress"),
    B(27, "collect.error.blockingResources"),
    C(28, "error.noResourceMap"),
    D(29, "too.far.to.interact"),
    E(30, "collect.error.tooEarly"),
    F(31, "craft.error.recipeAlreadyKnown"),
    G(33, "craft.error.badLevelForSecret"),
    H(34, "craft.error.recipeNotAllowed"),
    I(37, "craft.error.recipeNotAllowed"),
    J(38, "error.searchTreasureFailed"),
    K(50, "inventory.error.lackItem"),
    L(51, "error.bagFull"),
    M(52, "action.error.wrongItemEquiped"),
    N(53, "collect.error.ItemNotUsable"),
    O(55, "inventory.error.lackItem"),
    P(57, "item.error.alreadyInBags"),
    Q(58, "item.error.impossibilityToEquip"),
    R(61, "item.error.impossibilityToUse"),
    S(64, "cantEquipPetItem"),
    T(65, "incompatibleRentTypes"),
    U(66, "incompatibleItemTypes"),
    V(60, "item.error.cantBeEquiped"),
    W(59, "error.item.actionFailed"),
    X(63, "market.alreadyBoughtEntry"),
    Y(67, "item.error.cantEquipAnUnidentifiedItem"),
    Z(100, "ie.lootChestIsEmpty"),
    aa(101, "ie.wellHasTooManyUsers"),
    ab(102, "ie.onlyOneActionByUser"),
    ac(103, "bag.forbiddenOutsideMarket"),
    ad(104, "ie.wrongRights"),
    ae(105, "ie.notEnoughSpaceToRepack"),
    af(106, "ie.invalidCell"),
    ag(107, "chat.travel.invalidCriterion"),
    ah(108, "bag.forbidden.moving"),
    ai(109, "error.dungeon.admin.locked"),
    aj(110, "error.dungeon.member.locked"),
    ak(111, "bag.forbiddenInEnnemyTerritory"),
    al(201, "challenge.refused"),
    am(202, "challenge.delayoutdated"),
    an(203, "challenge.maxUsersLimit"),
    ao(300, "group.error.alreadyInParty"),
    ap(318, "group.error.alreadyInGuild"),
    aq(301, "group.error.self_invitation"),
    ar(302, "group.error.no_rights"),
    as(303, "group.error.unknown_user"),
    at(315, "group.error.nation.is.enemy"),
    au(304, "group.error.invitation_refused"),
    av(305, "group.error.remote_not_in_group"),
    aw(306, "group.error.not_in_group"),
    ax(307, "group.error.full"),
    ay(325, "group.error.cant.merge.too.many.members"),
    az(323, "group.error.companion.full"),
    aA(335, "group.error.breed.unavailable"),
    aB(336, "group.error.isHero"),
    aC(324, "group.error.mustSubscribeToGroupWithCompanion"),
    aD(308, "group.error.invitationPending"),
    aE(309, "guild.error.name"),
    aF(314, "guild.error.name.already.exist"),
    aG(310, "guild.error.blazon"),
    aH(311, "guild.error.creationFailed"),
    aI(312, "guild.error.user.already.in.guild"),
    aJ(313, "error.guild.creation.creator.already.in.guild"),
    aK(317, "group.error.remoteInFight"),
    aL(319, "group.error.groupDisabled"),
    aM(320, "group.error.groupWithOtherBreedDisabled"),
    aN(321, "group.error.remoteGroupDisabled"),
    aO(322, "group.error.remoteGroupWithOtherBreedDisabled"),
    aP(500, "monster.error.monsterAction.failed"),
    aQ(501, "error.summon.rename.forbidden"),
    aR(1020, "fight.error.join.cannotAttack"),
    aS(1021, "fight.error.join.cannotBeJoined"),
    aT(1022, "fight.error.join.targetNotInFight"),
    aU(1023, "fight.error.join.selfInFight"),
    aV(1024, "fight.error.join.onlyDuringPlacement"),
    aW(1025, "fight.error.join.fightLocked"),
    aX(1026, "fight.error.join.cannotWalk"),
    aY(1027, "fight.error.join.fightFull"),
    aZ(1028, "fight.error.join.cantStake"),
    ba(1029, "fight.error.join.selfDead"),
    bb(1030, "fight.error.join.enteringDimensionalBag"),
    bc(1031, "fight.error.join.exchanging"),
    bd(1032, "fight.error.join.rollingLoot"),
    be(1033, "fight.error.join.targetDead"),
    bf(1034, "fight.error.join.targetNotInParty"),
    bg(1035, "fight.error.join.groupMemberInOpposingTeam"),
    bh(1036, "fight.error.join.cannotDefendEnemyProtector"),
    bi(1037, "fight.error.join.cannotAttackAlliedProtector"),
    bj(1038, "fight.error.join.cannotJoinDuel"),
    bk(1039, "fight.error.join.cannotJoinTuto"),
    bl(1040, "fight.error.join.cannotJoinMonsters"),
    bm(1045, "fight.error.join.noNation"),
    bn(1041, "fight.error.join.cannotSelectTeam"),
    bo(1042, "fight.error.join.targetTooFar"),
    bp(1043, "fight.error.join.no.start.placement.found"),
    bq(1044, "fight.error.join.isDead"),
    br(1047, "fight.error.join.spectating"),
    bs(1048, "spectator.fight.error.join.moving"),
    bt(1049, "spectator.fight.error.join.badInstance"),
    bu(10200, "nation.error.governmentNominationRefuseChatMessage"),
    bv(10201, "nation.error.governmentNominationRankOccupiedChatMessage"),
    bw(10202, "group.error.unknown_user"),
    bx(10203, "nation.error.governmentNominationOtherNationChatMessage"),
    by(10204, "nation.error.governmentNominationAlreadyInGovChatMessage"),
    bz(10205, "nation.error.governmentNominationCriterionFailChatMessage"),
    bA(10207, "nation.error.governmentNominationNotEnoughCitizenScoreChatMessage"),
    bB(10206, "nation.error.diplomacy.requestTooEarly"),
    bC(10211, "nation.error.diplomacy.alreadyHasAlly"),
    bD(10212, "nation.error.diplomacy.alreadyHasAllyRequest"),
    bE(10208, "nation.error.governmentNominationForbiddenByRevokeChatMessage"),
    bF(10209, "nation.error.governmentCandidateForbiddenByRevokeChatMessage"),
    bG(10210, "nation.error.voteForbiddenChatMessage"),
    bH(10213, "nation.error.alreadyVoted"),
    bI(7, "error.playerNotSubscribed"),
    bJ(8, "error.targetNotSubscribed"),
    bK(10300, "companion.error.generic"),
    bL(10301, "companion.itemEquipErrorGeneric"),
    bM(10302, "companion.error.unknownCompanion"),
    bN(10303, "companion.error.companionUnalaivable"),
    bO(10304, "companion.error.badInstance"),
    bP(10305, "companion.could.not.retrieve.everything"),
    bQ(11000 + faG.b.a(), "market.kamas.sent.to.rewards"),
    bR(11000 + faG.c.a(), "market.not.all.items.in.offer"),
    bS(11000 + faG.d.a(), "market.generic.error"),
    bT(11000 + faG.e.a(), "market.generic.error"),
    bU(11000 + faG.f.a(), "market.unavailable"),
    bV(11000 + faG.g.a(), "market.invalid.parameters"),
    bW(11000 + faG.h.a(), "market.generic.error"),
    bX(11000 + faG.i.a(), "market.player.has.occupation"),
    bY(11000 + faG.j.a(), "market.player.flooding"),
    bZ(11000 + faG.k.a(), "market.not.enough.cash"),
    ca(11000 + faG.l.a(), "market.player.too.many.entries"),
    cb(11000 + faG.m.a(), "market.inventory.error"),
    cc(11000 + faG.n.a(), "market.player.is.blacklisted"),
    cd(11000 + faG.o.a(), "market.unknown.item"),
    ce(11000 + faG.p.a(), "market.invalid.item"),
    cf(11000 + faG.q.a(), "market.item.not.enough.quantity"),
    cg(11000 + faG.r.a(), "market.inventory.is.full"),
    ch(11000 + faG.s.a(), "market.item.does.not.match.offer"),
    ci(11000 + faG.t.a(), "market.unknown.entry"),
    cj(11000 + faG.u.a(), "market.generic.error"),
    ck(11000 + faG.v.a(), "market.unknown.offer"),
    cl(11000 + faG.w.a(), "market.generic.error"),
    cm(112, "furniture.invalid.direction");

    private static final TIntObjectHashMap<bqh_0> cp;
    public final int cn;
    public final String co;

    private bqh_0(int n2, String string2) {
        this.cn = n2;
        this.co = string2;
    }

    static bqh_0 a(int n) {
        return (bqh_0)((Object)cp.get(n));
    }

    static {
        cp = new TIntObjectHashMap();
        for (bqh_0 bqh_02 : bqh_0.values()) {
            cp.put(bqh_02.cn, (Object)bqh_02);
        }
    }
}

