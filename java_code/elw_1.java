/*
 * Decompiled with CFR 0.152.
 */
import java.util.Optional;

/*
 * Renamed from elw
 * Illegal identifiers - consider using --renameillegalidents true
 */
public enum elw_1 implements fzb
{
    a("defaultLightColor"),
    b("defaultLightGoldColor"),
    c("defaultIntenseGoldColor"),
    d("pressedLightColor"),
    e("defaultBlackColor"),
    f("blackColor"),
    g("pressedBlackColor"),
    h("defaultDarkColor"),
    i("defaultDarkGreyColor"),
    j("windowBackgroundColor"),
    k("tooltipBackgroundColor"),
    l("tooltipBorderColor"),
    m("defaultDisabledColor"),
    n("popupInformationColor"),
    o("HPColor"),
    p("APColor"),
    q("MPColor"),
    r("WPColor"),
    s("SPColor"),
    t("QBColor"),
    u("ArmorColor"),
    v("heartHPColor"),
    w("heartArmorColor"),
    x("APLightColor"),
    y("MPLightColor"),
    z("WPLightColor"),
    A("redColor"),
    B("lightRedColor"),
    C("greenColor"),
    D("orangeTransColor"),
    E("whiteColor"),
    F("gray10Color"),
    G("gray20Color"),
    H("gray30Color"),
    I("gray40Color"),
    J("gray50Color"),
    K("gray60Color"),
    L("gray70Color"),
    M("gray80Color"),
    N("gray90Color"),
    O("lightGreyTransparentColor"),
    P("xpColor"),
    Q("xpColorCompanion"),
    R("ogrestColor"),
    S("protectorColor"),
    T("wakfuColor"),
    U("wakfuBarColor"),
    V("xpUnpenalizedColor"),
    W("xpPremiumColor"),
    X("levelColor"),
    Y("stasisJaugeColor"),
    Z("mythicRarityColor"),
    aa("legendaryRarityColor"),
    ab("relicRarityColor"),
    ac("souvenirRarityColor"),
    ad("epicRarityColor"),
    ae("oldRarityColor"),
    af("commonRarityColor"),
    ag("rareRarityColor"),
    ah("adminRarityColor"),
    ai("positiveStateColor"),
    aj("neutralStateColor"),
    ak("negativeStateColor"),
    al("errorColor"),
    am("redInvalidBuildColor"),
    an("greyInvalidColor"),
    ao("mecanicBlueColor"),
    ap("mecanicBlueForHoverColor"),
    aq("mecanicLightBlueColor"),
    ar("mecanicDarkBlueColor"),
    as("scrollFleshColor"),
    at("progressBarDefaultColor"),
    au("yellowScoreColor"),
    av("scrollYellowColor"),
    aw("loadingWheelColor"),
    ax("loadingTextColor"),
    ay("loginGradientColor"),
    az("serverOnlineColor"),
    aA("serverUnavailableColor"),
    aB("serverDifferentVersion"),
    aC("playerTeamHPColor"),
    aD("enemyTeamHPColor"),
    aE("team1PlacementCellColor"),
    aF("team2PlacementCellColor"),
    aG("fightReportOddCellColor"),
    aH("fightReportEvenCellColor"),
    aI("oddCellColor"),
    aJ("evenCellColor"),
    aK("selectedCellColor"),
    aL("mouseOverCellColor"),
    aM("detailedCellColor"),
    aN("darkOddCellColor"),
    aO("darkEvenCellColor"),
    aP("darkSelectedCellColor"),
    aQ("darkMouseOverCellColor"),
    aR("scrollOddCellColor"),
    aS("scrollEvenCellColor"),
    aT("scrollSelectedCellColor"),
    aU("scrollMouseOverCellColor"),
    aV("tableCellBorderColor"),
    aW("textDarkTextEditorColor"),
    aX("selectionDarkTextEditorColor"),
    aY("chalkboardBackgroundColor"),
    aZ("chalkboardBorderColor"),
    ba("previewButtonBorderColor"),
    bb("descriptionPopupColor"),
    bc("fleaEvenCellColor"),
    bd("fleaOddCellColor"),
    be("enabledHeroSlotColor"),
    bf("disabledHeroSlotColor"),
    bg("heroGradientFirstColor"),
    bh("heroGradientSecondColor"),
    bi("companionGradientFirstColor"),
    bj("companionGradientSecondColor"),
    bk("listFilterColor"),
    bl("questObjectiveColor"),
    bm("informationMessageTitleColor"),
    bn("spellDeckHighlightColor"),
    bo("craftActionProgressBarColor"),
    bp("craftBackgroundProgressBarColor"),
    bq("passportTitleColor"),
    br("scrollTitleBackgroundColor"),
    bs("scrollTitleBackgroundColorLight"),
    bt("dungeonLadderRankingColor"),
    bu("dungeonLadderNoRankColor"),
    bv("dungeonLadderSeparatorColor"),
    bw("gainLaurelLawColor"),
    bx("lossLaurelLawColor"),
    by("backgroundBookColor"),
    bz("webShopHighlightColor"),
    bA("webShopOgrineAmountColor"),
    bB("webShopBackgroundColor"),
    bC("webShopMoneyPriceColor"),
    bD("webShopMoneyPriceSaleColor"),
    bE("webShopPriceBackgroundColor"),
    bF("webShopNotEnoughOgrinePriceColor"),
    bG("webShopOgrinePriceColor"),
    bH("webShopOgrinePriceSaleColor"),
    bI("webShopNotEnoughOgrinePriceBackgroundColor"),
    bJ("webShopMoneyPriceBackgroundColor"),
    bK("tacticalModeBackgroundColor"),
    bL("tacticalModeEvenCellColor"),
    bM("tacticalModeOddCellColor"),
    bN("tacticalModeObstacleCellColor"),
    bO("tacticalModeLineColor"),
    bP("tacticalModeLineDottedColor"),
    bQ("semiTacticalModeBackgroundColor"),
    bR("semiTacticalModeObstacleCellColor"),
    bS("semiTacticalModeLineColor"),
    bT("semiTacticalModeLineDottedColor"),
    bU("fightRangeColor"),
    bV("fightZoneEffectColor"),
    bW("fightZoneAdditionalEffectColor"),
    bX("fightRangeColorWithConstraints"),
    bY("fightRangeColorWithoutLineOfSight"),
    bZ("fightEmptyCellNeededColor"),
    ca("fightPathColor"),
    cb("fightPathErrorColor"),
    cc("fightResistancesBackgroundColor"),
    cd("fightResistancesTextColor"),
    ce("fightMinResistancesTextColor"),
    cf("fightMaxResistancesTextColor"),
    cg("fightExternalCellsLightModifier"),
    ch("fightRedTeamTimelineColor"),
    ci("fightRedTeamTimelineHighlightedColor"),
    cj("fightBlueTeamTimelineColor"),
    ck("fightBlueTeamTimelineHighlightedColor"),
    cl("importantTextColor"),
    cm("achievementCategoryCompleteColor"),
    cn("errorChannelColor"),
    co("informationChannelColor"),
    cp("fightInformationChannelColor"),
    cq("fightEffectChatColor"),
    cr("fightTargetChatColor"),
    cs("moderationMessagesColor"),
    ct("vicinityChannelColor"),
    cu("privateChannelColor"),
    cv("partyChannelColor"),
    cw("guildChannelColor"),
    cx("tradeChannelColor"),
    cy("politicChannelColor"),
    cz("battlegroundChannelColor"),
    cA("intergameChannelColor"),
    cB("frCommunityChannelColor"),
    cC("enCommunityChannelColor"),
    cD("esCommunityChannelColor"),
    cE("ptCommunityChannelColor"),
    cF("frRecruitmentChannelColor"),
    cG("enRecruitmentChannelColor"),
    cH("esRecruitmentChannelColor"),
    cI("ptRecruitmentChannelColor"),
    cJ("battlegroundAttackTeamScoreColor"),
    cK("battlegroundDefenseTeamScoreColor"),
    cL("mysteryBoxItemBackgroundColor"),
    cM("yellowColor"),
    cN("neutralTerritoryMapColor"),
    cO("amaknaTerritoryMapColor"),
    cP("bontaTerritoryMapColor"),
    cQ("brakmarTerritoryMapColor"),
    cR("sufokiaTerritoryMapColor"),
    cS("friendlyNationColor"),
    cT("enemyNationColor"),
    cU("territoryNameColor"),
    cV("timelineOrangeOverlayColor"),
    cW("timelineRedOverlayColor"),
    cX("guildPointsColor"),
    cY("craftFeeDefinedOddPriceColor"),
    cZ("craftFeeDefinedEvenPriceColor"),
    da("craftFeeInheritedOddPriceColor"),
    db("craftFeeInheritedEvenPriceColor"),
    dc("craftFeeTextEditorBackgroundOddColor"),
    dd("craftFeeTextEditorBackgroundEvenColor"),
    de("craftFeeNonDefinedOddPriceColor"),
    df("craftFeeNonDefinedEvenPriceColor"),
    dg("mainTextLightColor"),
    dh("mainTextDarkColor"),
    di("mainTextTitleColor"),
    dj("secondTextLightColor"),
    dk("disabledTextColor"),
    dl("thirdTextColor"),
    dm("listHighlightColor"),
    dn("marketTableEvenCellColor"),
    do("marketTableOddCellColor"),
    dp("highTaxColor"),
    dq("mediumTaxColor"),
    dr("lowTaxColor"),
    ds("marketValidSublimationColor"),
    dt("fireGradientColor"),
    du("waterGradientColor"),
    dv("earthGradientColor"),
    dw("windGradientColor"),
    dx("lightGradientColor"),
    dy("stasisGradientColor"),
    dz("neutralGradientColor"),
    dA("fireColor"),
    dB("waterColor"),
    dC("airColor"),
    dD("earthColor"),
    dE("characStandardColor"),
    dF("legacyCharacStandardColor"),
    dG("characNegativeColor"),
    dH("tooltipLinkColor"),
    dI("warningIconColor"),
    dJ("black75"),
    dK("white50"),
    dL("secondaryLight");

    private String dM;

    private elw_1(String string2) {
        this.dM = string2;
    }

    @Override
    public String a() {
        return this.dM;
    }

    public static Optional<elw_1> a(String string) {
        for (elw_1 elw_12 : elw_1.values()) {
            if (!elw_12.dM.equals(string)) continue;
            return Optional.of(elw_12);
        }
        return Optional.empty();
    }
}

